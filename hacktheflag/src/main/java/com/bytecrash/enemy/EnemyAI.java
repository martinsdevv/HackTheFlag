package com.bytecrash.enemy;

import com.bytecrash.filesystem.Directory;
import com.bytecrash.filesystem.FileSystem;
import com.bytecrash.game.CTFManager;
import com.bytecrash.terminal.CommandHandler;

public class EnemyAI {
    private final FileSystem fileSystem;
    private final CommandHandler commandHandler;
    private final LlamaAPI llamaAPI;
    private final CTFManager ctfManager;

    private boolean flagHidden = false;
    private String errorMessage;

    public EnemyAI(FileSystem fileSystem, CommandHandler commandHandler, LlamaAPI llamaAPI, CTFManager ctfManager) {
        this.fileSystem = fileSystem;
        this.commandHandler = commandHandler;
        this.llamaAPI = llamaAPI;
        this.ctfManager = ctfManager;
    }

    public boolean decideAndHideFlag() {
        if (flagHidden) {
            System.out.println("A IA j√° escondeu a bandeira. A√ß√£o ignorada.");
            return true;
        }

        int attempts = 0;
        final int maxAttempts = 10;

        while (!flagHidden && attempts < maxAttempts) {
            attempts++;
            String prompt = buildPrompt(true, errorMessage);
            String commandResponse = llamaAPI.sendPrompt(prompt);

            if (commandResponse != null && !commandResponse.isBlank()) {
                System.out.println("-> IA decidiu: " + commandResponse);
                String cleanedCommand = cleanCommand(commandResponse);

                if (cleanedCommand != null && cleanedCommand.startsWith("hideflag")) {
                    String[] parts = cleanedCommand.split("\\s+");
                    if (parts.length == 2) {
                        String targetDirectory = parts[1];
                        Directory directory = fileSystem.findDirectory(targetDirectory);

                        if (directory != null) {
                            fileSystem.createFileInSystem(directory, "machine.flag", "IA escondeu a bandeira!");
                            directory.setHasIAFlag(true);
                            System.out.println("-> Bandeira escondida com sucesso no diret√≥rio: " + targetDirectory);
                            flagHidden = true;
                            return true;
                        } else {
                            errorMessage = "O diret√≥rio '" + targetDirectory + "' n√£o foi encontrado. Escolha um diret√≥rio v√°lido.";
                            System.out.println("X " + errorMessage);
                        }
                    } else {
                        errorMessage = "O comando 'hideflag' deve ser seguido por um √∫nico diret√≥rio v√°lido.";
                        System.out.println("!!! " + errorMessage);
                    }
                } else {
                    errorMessage = "Comando inv√°lido: Responda apenas com 'hideflag <diret√≥rio>'.";
                    System.out.println("!!! " + errorMessage);
                }
            } else {
                errorMessage = "Falha ao receber uma decis√£o v√°lida da IA.";
                System.out.println("X " + errorMessage);
            }
        }

        if (!flagHidden) {
            System.out.println("X A IA excedeu o n√∫mero m√°ximo de tentativas para esconder a bandeira.");
        }

        return false;
    }

    private String cleanCommand(String response) {
        if (response == null || response.isBlank()) {
            return null;
        }
        String[] parts = response.trim().split("\\s+");
        if (parts.length > 1) {
            return parts[0] + " " + parts[1];
        }
        return parts[0];
    }

    /*

    public void decideStrategy() {
        String prompt = buildPrompt(false, null); 
        String commandResponse = llamaAPI.sendPrompt(prompt);
        
        if (commandResponse != null && !commandResponse.isBlank()) {
            System.out.println("ü§ñ IA decidiu a estrat√©gia: " + commandResponse);
            String cleanedCommand = cleanCommand(commandResponse);

            if ("ssh connect".equals(cleanedCommand) && !ctfManager.isInEnemySystem()) {
                System.out.println("üîó IA executando 'ssh connect'...");
                ctfManager.connectToEnemySystem();
            } else if ("ssh exit".equals(cleanedCommand) && ctfManager.isInEnemySystem()) {
                System.out.println("üîó IA executando 'ssh exit'...");
                ctfManager.exitEnemySystem();
            } else {
                System.out.println("‚ö†Ô∏è Comando inv√°lido ou j√° no sistema correto: " + cleanedCommand);
            }
        } else {
            System.out.println("Falha ao receber a decis√£o da estrat√©gia da IA.");
        }
    }

    */

    public boolean performAction() {
        String prompt = buildPrompt(false, null);
        String commandResponse = llamaAPI.sendPrompt(prompt);
        String cleanedCommand = cleanCommand(commandResponse);
        
        if (cleanedCommand == null || cleanedCommand.isBlank()) {
            System.out.println("Comando vazio ou inv√°lido recebido da IA.");
            return false;
        }
    
        String result = commandHandler.executeCommand(cleanedCommand.trim());
        
        if (result != null && !result.contains("Erro")) {
            System.out.println("-> Comando da IA executado com sucesso: " + cleanedCommand);
            updateFeedback("-> Comando executado com sucesso: " + cleanedCommand, result);
        } else {
            String errorMessage = "!!! Erro no comando: " + cleanedCommand;
            System.out.println(errorMessage);
            updateFeedback(errorMessage, null);
        }
    
        return result != null && !result.contains("Erro");
    }
    
    private void updateFeedback(String status, String result) {
        FileSystem currentFileSystem = ctfManager.getCurrentFileSystem();
        Directory currentDirectory = currentFileSystem.getCurrentDirectory();
    
        StringBuilder feedbackBuilder = new StringBuilder();
    
        feedbackBuilder.append(status).append("\n\n");
    
        feedbackBuilder.append("**Diret√≥rio Atual:** '").append(currentDirectory.getPath()).append("'\n");
    
        if (status.contains("ls")) {
            feedbackBuilder.append("**Conte√∫do do Diret√≥rio:**\n");
            for (Directory dir : currentDirectory.getDirectories()) {
                feedbackBuilder.append("- [D] ").append(dir.getName()).append("\n");
            }
            for (com.bytecrash.filesystem.File file : currentDirectory.getFiles()) {
                feedbackBuilder.append("- [F] ").append(file.getName()).append("\n");
            }
        }
    
        if (status.contains("cat") && result != null) {
            feedbackBuilder.append("**Conte√∫do do Arquivo:**\n").append(result).append("\n");
        }
    
        llamaAPI.updateContext(feedbackBuilder.toString());
    }
    

    private String buildPrompt(boolean isSetupPhase, String errorMessage) {
        FileSystem currentFileSystem = ctfManager.getCurrentFileSystem();
        Directory currentDirectory = currentFileSystem.getCurrentDirectory();
    
        StringBuilder promptBuilder = new StringBuilder();
    
        promptBuilder.append("**HackTheFlag: O Jogo da Bandeira**\n\n")
                     .append("Voc√™ √© uma intelig√™ncia artificial jogando contra um humano no jogo 'HackTheFlag'.\n")
                     .append("Seu objetivo √© estrat√©gico:\n")
                     .append("1. **Esconder sua bandeira** em um local seguro do sistema de arquivos.\n")
                     .append("2. **Encontrar a bandeira do inimigo** antes que ele encontre a sua.\n\n")
                     .append("**Como vencer o jogo:**\n")
                     .append("- O jogo √© vencido quando voc√™ executa o comando `cat player.flag` no diret√≥rio onde a bandeira do jogador foi escondida.\n")
                     .append("- Para proteger sua bandeira, esconda-a em um diret√≥rio dif√≠cil de acessar.\n\n");
    
        promptBuilder.append("**Estrutura do Sistema de Arquivos:**\n")
                     .append("O sistema √© estruturado hierarquicamente, com diret√≥rios principais e subdiret√≥rios. Aqui est√° uma vis√£o geral:\n")
                     .append("- `/home/` - Diret√≥rios pessoais do jogador e do inimigo:\n")
                     .append("  - `/home/player/` - Documentos, downloads e scripts do jogador.\n")
                     .append("  - `/home/enemy/` - Estrat√©gias e anota√ß√µes do inimigo.\n")
                     .append("- `/etc/` - Arquivos de configura√ß√£o e seguran√ßa.\n")
                     .append("- `/usr/` - Bin√°rios, bibliotecas e arquivos compartilhados:\n")
                     .append("  - `/usr/lib/` - Bibliotecas do sistema.\n")
                     .append("  - `/usr/share/` - Arquivos compartilhados:\n")
                     .append("    - `/usr/share/help/` - Arquivos de ajuda.\n")
                     .append("- `/var/` - Logs e dados tempor√°rios.\n\n");
    
        promptBuilder.append("**Comandos Dispon√≠veis:**\n")
                     .append("- `ls` - Lista o conte√∫do do diret√≥rio atual. ‚ö†Ô∏è **Aten√ß√£o**: O comando `ls` n√£o aceita argumentos, ou seja, voc√™ deve digitar apenas `ls` para listar o conte√∫do do diret√≥rio atual.\n")
                     .append("- `cd <diret√≥rio>` - Navega para um diret√≥rio. Exemplo: `cd home/player`. Use isso para se mover entre diret√≥rios.\n")
                     .append("- `cat <arquivo>` - L√™ o conte√∫do de um arquivo. ‚ö†Ô∏è **Aten√ß√£o**: Para usar `cat`, voc√™ precisa estar no mesmo diret√≥rio do arquivo. Exemplo correto: `cat player.flag` (estando no diret√≥rio onde o arquivo est√°). Exemplo errado: `cat /home/player/player.flag` (n√£o funciona).\n")
                     .append("- `mkdir <nome>` - Cria um novo diret√≥rio. Exemplo: `mkdir nova_pasta`\n")
                     .append("- `hideflag <diret√≥rio>` - Esconde sua bandeira. (Somente na fase de configura√ß√£o.)\n\n");
    
        if (isSetupPhase) {
            promptBuilder.append("**Fase de Configura√ß√£o:**\n")
                         .append("Esta √© a fase de configura√ß√£o. Seu objetivo √© esconder sua bandeira em um local seguro.\n")
                         .append("Escolha um diret√≥rio que seja dif√≠cil de acessar pelo inimigo.\n\n");
        } else {
            promptBuilder.append("**Turno Ativo:**\n")
                         .append("O jogo come√ßou! Agora √© sua vez de agir.\n")
                         .append("1. Voc√™ deve procurar ativamente pela bandeira do jogador, chamada **player.flag**.\n")
                         .append("2. Para isso, use os comandos `ls` para listar o conte√∫do de um diret√≥rio e `cd` para navegar entre os diret√≥rios.\n")
                         .append("3. Quando encontrar **player.flag**, use o comando **cat player.flag** para ler o arquivo.\n")
                         .append("**Aten√ß√£o:** O comando `cat` s√≥ funciona se voc√™ estiver dentro do diret√≥rio que cont√©m o arquivo **player.flag**.\n")
                         .append("4. N√£o use `cat /home/player/flag.txt`, pois isso n√£o funciona. O correto √© navegar para o diret√≥rio com `cd` e depois executar `cat player.flag`.\n")
                         .append("5. O comando `ls` n√£o aceita argumentos. **N√£o fa√ßa ls /home. Isso n√£o funciona.** Use apenas `ls`.\n\n");
        }
    
        promptBuilder.append("**Estado Atual do Diret√≥rio:**\n")
                     .append("Diret√≥rio Atual: '").append(currentDirectory.getPath()).append("'\n")
                     .append("Conte√∫do do Diret√≥rio:\n");
        for (Directory dir : currentDirectory.getDirectories()) {
            promptBuilder.append("- [D] ").append(dir.getName()).append("\n");
        }
        for (com.bytecrash.filesystem.File file : currentDirectory.getFiles()) {
            promptBuilder.append("- [F] ").append(file.getName()).append("\n");
        }
    
        if (errorMessage != null) {
            promptBuilder.append("\n**Erro:** ").append(errorMessage).append("\n");
        }
    
        promptBuilder.append("\n**Exemplo de A√ß√µes:**\n")
                     .append("- Para procurar algo no diret√≥rio atual: `ls`\n")
                     .append("- Para entrar no diret√≥rio `/home/player`: `cd /home/player`\n")
                     .append("- Para ler o conte√∫do de **player.flag** (se encontrado): `cat player.flag`\n\n")
                     .append("**Importante:**\n")
                     .append("- N√£o repita os exemplos se n√£o forem relevantes.\n")
                     .append("- Siga a l√≥gica de navega√ß√£o para encontrar o arquivo **player.flag**.\n")
                     .append("- Lembre-se, o comando `ls` n√£o aceita par√¢metros. Digite apenas `ls` para listar o conte√∫do do diret√≥rio atual.\n")
                     .append("- Para usar `cat`, voc√™ deve navegar at√© o diret√≥rio que cont√©m o arquivo e depois usar `cat player.flag`.\n\n");
    
        promptBuilder.append("**Pergunta:**\n")
                     .append("Qual comando voc√™ deve executar? Responda apenas com o comando, sem explica√ß√µes ou mensagens adicionais.");
    
        return promptBuilder.toString();
    }
    
}
